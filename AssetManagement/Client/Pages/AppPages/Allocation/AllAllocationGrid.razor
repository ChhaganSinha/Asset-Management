@page "/allocations"
@page "/allocations/{cmp}/{label?}"
@using AssetManagement.Client.Pages.GridComponent
@using AssetManagement.Client.Shared.Popup
@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using AssetManagement.Dto
@using AssetManagement.Dto.Models
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<!-- Breadcrumb Section -->
<nav aria-label="breadcrumb" class="breadcrumb-container borderd" style="background: #49474763;">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/"><i class="fa fa-home"></i> Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Allocations</li>
    </ol>
</nav>

<!-- Action Button -->
<div class="mb-2">
    <a href="allocation-config" class="btn btn-primary p-1">
        <i class="fa fa-plus fa-lg" aria-hidden="true"></i> Allocation
    </a>
</div>

<!-- Main Card -->
<div class="card borderd" style="padding: 0 10px;">
    <div class="card-body">
        @if (cmp != null)
        {
            @if (_task.IsCompleted)
            {
                <div class="row">
                    <div class="col-sm-12">
                        <GridComponent T="Allocation" Grid="@_grid"></GridComponent>
                    </div>
                </div>
            }
            else
            {
                <div class="col-sm-12 mt-4">
                    <div class="loader-container">
                        <div class="loader"></div>
                    </div>
                </div>
            }
        }
        else
        {
            <AllocationsGrid />
        }
    </div>
</div>

@code {
    [Parameter]
    public string cmp { get; set; }

    [Parameter]
    public string label { get; set; }

    private CGrid<Allocation> _grid;
    private Task _task;
    static bool filter = false;

    Action<IGridColumnCollection<Allocation>> columns = c =>
    {
        c.Add(o => o.Id).SetWidth("50px").Css("table-bordered").Titled("SN.").Filterable(filter);
        c.Add(o => o.CompanyCode).SetWidth("50px").Css("table-bordered").Titled("Company").Filterable(filter);
        c.Add(o => o.Employee.EmployeeName).SetWidth("50px").Css("table-bordered").Titled("Employee").Filterable(filter);
        c.Add(o => o.Employee.CompanyCode).SetWidth("50px").Css("table-bordered").Titled("EmployeeCompany").Filterable(filter);
        c.Add(o => o.AssetType).SetWidth("50px").Css("table-bordered").Titled("Type").Filterable(filter);
        c.Add(o => o.Asset.Model).SetWidth("50px").Css("table-bordered").Titled("Asset").Filterable(filter);
        c.Add(o => o.AssetModel).Css("table-bordered").Titled("Asset").Filterable(filter);
        c.Add(o => o.AllocationType).SetWidth("50px").Css("table-bordered").Titled("Allocation").Filterable(filter);
        c.Add(o => o.IssueDate).Format("{0:dd/MMM/yyyy}").SetWidth("50px").Css("table-bordered").Filterable(filter);
        c.Add(o => o.IssueTill).Format("{0:dd/MMM/yyyy}").SetWidth("50px").Css("table-bordered").Filterable(filter);
        c.Add(o => o.ReturnDate).Format("{0:dd/MMM/yyyy}").SetWidth("50px").Css("table-bordered").Filterable(filter);
        c.Add(o => o.Responce).SetWidth("50px").Css("table-bordered").Filterable(filter);
        c.Add(o => o.Comment).SetWidth("50px").Css("table-bordered").Filterable(filter);
    };

    protected override async Task OnParametersSetAsync()
    {
        string url = $"odata/Allocation";
        var query = new QueryDictionary<StringValues>();

        if (!string.IsNullOrEmpty(cmp))
        {
            if (label == "Permanent Allocation")
            {
                var values = new string[] { $"AllocationType__1__Permanent", $"CompanyCode__1__{cmp}" };
                query.Add("grid-filter", new StringValues(values));
            }
            else if (label == "Temporary Allocation")
            {
                var values = new string[] { $"AllocationType__1__Temporary", $"CompanyCode__1__{cmp}" };
                query.Add("grid-filter", new StringValues(values));
            }
            else
            {
                query.Add("grid-filter", new StringValues($"CompanyCode__1__{cmp}"));
            }
        }

        var client = new GridODataClient<Allocation>(HttpClient, url, query, false, "AllocationGrid", columns, 10)
            .Sortable(false)
            .Filterable(false)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithGridItemsCount()
            .SetExcelExport(true, true, "Allocation.xlsx")
            .ChangePageSize(true)
            .EmptyText("No data available")
            .SetKeyboard(true)
            .Searchable(true, false, false);

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;
    }
}
