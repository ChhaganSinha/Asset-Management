@page "/reports"
@page "/report/{Id:int}"

@using AssetManagement.Client.Client;
@using AssetManagement.Client.Pages.GridComponent
@using AssetManagement.Client.Shared.Popup
@using AssetManagement.Client.Shared
@using AssetManagement.Dto.Models;
@using System.Globalization;
@using AssetManagement.Dto;
@using MudBlazor
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject IDialogService DialogService

<div class="card">
    <div class="card-header" style="padding: 8px !important; display: flex; align-items: center;">
        <h5>Reports</h5>
        <div style="margin-left: auto;">
            <Breadcrumb Items="breadcrumbItems" />
        </div>
    </div>


    <div class="card-body">

        <div class="form-group row m-0">
            <label class="col-form-label col-md-2 bold-font" style="line-height: 34px;">Report Type</label>
            <div class="col-md-10">
                <InputRadioGroup TValue="string" @bind-Value="SelectedOption" class="d-flex" @oninput="OnRadioChange">
                    <div class="form-check me-3">
                        <InputRadio TValue="string" class="form-check-input" Value="Employee" id="optEmployee" />
                        <label class="form-check-label" for="optEmployee">Employee</label>
                    </div>
                    <div class="form-check">
                        <InputRadio TValue="string" class="form-check-input" Value="Asset" id="optAsset" />
                        <label class="form-check-label" for="optAsset">Asset</label>
                    </div>
                </InputRadioGroup>
            </div>
        </div>

        <div style="background: whitesmoke;border-radius: 5px;">
            @if (SelectedOption == "Employee")
            {              
                <div class="form-group row mb-2 p-2 mt-1" style="margin:0">

                    <EditForm Model="employeeModel">
                        <div class="form-group row" style="padding:4px">
                            <div class="col-md-3">
                                <label class="form-label bold-font">Company</label>
                                <DropdownSelect T="string" @bind-Value="selectedSourceCompanyCode"
                                               DataSource="CompanyDropdown"
                                               EmptyText="-- Select Company --"
                                               Css="form-select" />
                            </div>

                            <div class="col-md-3">
                                <label class="form-label bold-font">Job Profile</label>
                                <DropdownSelect T="string" @bind-Value="selectedJobProfile"
                                               DataSource="JobProfileDropdown"
                                               EmptyText="-- Select --"
                                               Css="form-select" />
                            </div>

                            <div class="col-md-3">
                                <label class="form-label bold-font">Manager</label>
                                <DropdownSelect T="string" @bind-Value="selectedManager"
                                               DataSource="ManagerDropdown"
                                               EmptyText="-- Select --"
                                               Css="form-select" />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label bold-font">Office Branch</label>
                                <DropdownSelect T="string" @bind-Value="selectedBranch"
                                               DataSource="BranchDropdown"
                                               EmptyText="-- Select --"
                                               Css="form-select" />
                            </div>
                        </div>
                        <div class="form-group row" style="padding:4px">
                            <div class="col-md-10">
                                <InputRadioGroup TValue="string" @bind-Value="selectedEmployeeStatus" class="d-flex" @oninput="OnStatusChange">
                                    <div class="form-check me-3">
                                        <InputRadio TValue="string" class="form-check-input" Value="All" id="statusAll" />
                                        <label class="form-check-label" for="statusAll">All Employee</label>
                                    </div>
                                    <div class="form-check me-3">
                                        <InputRadio TValue="string" class="form-check-input" Value="Active" id="statusActive" />
                                        <label class="form-check-label" for="statusActive">Active Employee</label>
                                    </div>
                                    <div class="form-check">
                                        <InputRadio TValue="string" class="form-check-input" Value="Resigned" id="statusResigned" />
                                        <label class="form-check-label" for="statusResigned">Resigned Employee</label>
                                    </div>
                                </InputRadioGroup>
                            </div>
                        </div>
                        <div class="form-group row" style="padding:4px">
                            <div class="col-md-4">
                                <HxMultiSelect TItem="string" TValue="string" Data="SkillOptions"
                                               Value="@selectedSkills"
                                               ValueChanged="OnSkillsChanged"
                                               ValueExpression="@(() => selectedSkills)"
                                               TextSelector="@(s => s)" ValueSelector="@(s => s)"
                                               EmptyText="- select -" NullDataText="Loading..." />
                                <div class="form-check form-switch mt-2">
                                    <InputCheckbox class="form-check-input" id="multiTextChoice" @bind-Value="multiselectionTextChoice" />
                                    <label class="form-check-label" for="multiTextChoice">MultiSelection Text choice</label>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="input-group">
                                    <input type="date" class="form-control" @bind="joinDateStart" />
                                    <input type="date" class="form-control" @bind="joinDateEnd" />
                                </div>
                            </div>
                            @if(selectedEmployeeStatus == "Resigned")
                            {
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <input type="date" class="form-control" @bind="resignDateStart" />
                                        <input type="date" class="form-control" @bind="resignDateEnd" />
                                    </div>
                                </div>
                            }

                            @* <div class="col-md-4">
                        <MudGrid>
                        <MudItem xs="12" sm="12" md="12">
                        <MudAutocomplete T="string" Label="Location" @bind-Value="selectedLocation" SearchFunc="@LocationSearch" Variant="Variant.Outlined" Margin="Margin.Dense"
                        ToStringFunc="@(e => e == null ? null : $"{e}")"
                        Required="false"
                        ResetValueOnEmptyText="true"
                        CoerceText="true"
                        CoerceValue="true"
                        MaxItems="null">
                        </MudAutocomplete>
                        </MudItem>
                        </MudGrid>
                        </div> *@
                          
                        </div>

                        <button type="button" class="btn btn-primary btn-sm" @onclick="ViewReportData">View</button>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="ClearFilter">Clear</button>
                    </EditForm>
                </div>
            }
            else
            {
             
                <div class="form-group row mb-2 p-2 mt-1" style="margin:0">

                    <EditForm Model="employeeModel">
                        <div class="form-group row" style="padding:4px">
                            <div class="col-md-3">
                                <label class="form-label bold-font">Company</label>
                                <DropdownSelect T="string" @bind-Value="selectedSourceCompanyForAssetCode"
                                               DataSource="CompanyDropdown"
                                               EmptyText="-- Select Company --"
                                               Css="form-select" />
                            </div>

                            <div class="col-md-3">
                                <label class="form-label bold-font">Asset Type</label>
                                <DropdownSelect T="string" @bind-Value="selectedAssetType"
                                               DataSource="AssetTypeDropdown"
                                               EmptyText="-- Select --"
                                               Css="form-select" />
                            </div>

                            <div class="col-md-3">
                                <label class="form-label bold-font">Brand</label>
                                <DropdownSelect T="string" @bind-Value="selectedAssetBrand"
                                               DataSource="AssetBrandDropdown"
                                               EmptyText="-- Select --"
                                               Css="form-select" />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label bold-font">Model</label>
                                <DropdownSelect T="string" @bind-Value="selectedAssetModel"
                                               DataSource="AssetModelDropdown"
                                               EmptyText="-- Select --"
                                               Css="form-select" />
                            </div>
                        </div>

                        <div class="form-group row" style="padding:4px">
                            <div class="col-md-4">
                                <InputSelect @bind-Value="allocationStatus" class="form-select">
                                    <option value="All">All</option>
                                    <option value="Free">Free</option>
                                    <option value="Allocated">Allocated</option>
                                </InputSelect>
                            </div>

                            <div class="col-md-4">
                                <div class="input-group">
                                    <input type="date" class="form-control" @bind="aquireDateStart" />
                                    <input type="date" class="form-control" @bind="aquireDateEnd" />
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="input-group">
                                    <input type="date" class="form-control" @bind="discardDateStart" />
                                    <input type="date" class="form-control" @bind="discardDateEnd" />
                                </div>
                            </div>

                           


                        </div>

                        <button type="button" class="btn btn-primary btn-sm" @onclick="ViewReportData">View</button>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="ClearAssetFilter">Clear</button>
                    </EditForm>
                </div>
            }
        </div>

        @if (showReport && SelectedOption == "Employee")
        {
            <div style="background: whitesmoke;border-radius: 5px;">
                <div class="table-container table-responsive" style="overflow: auto; max-height:300px">
                    <table id="printContent" class="table table-striped table-hover print-table">
                        <thead class="bg-secondary text-light fixed-div">
                            <tr style="text-align:center">
                                <td>SN.</td>
                                <td>Company</td>
                                <td>EmployeeID</td>
                                <td>Status</td>
                                <td>Name</td>
                                <td>Father</td>
                                <td>Email</td>
                                <td>Mobile</td>
                                <td>Aadhaar</td>
                                <td>PAN</td>
                                <td>UAN</td>
                                <td>Education</td>
                                <td>Skills</td>
                                <td>Designation</td>
                                <td>DOB</td>
                                <td>Manager</td>
                                <td>JoinDate</td>
                                <td>ResignDate</td>

                            </tr>
                        </thead>
                        <tbody>

                            @if (responceDataOfEmployee?.Count == 0)
                            {
                                <tr><td colspan="3">No data found</td></tr>
                            }
                            else
                            {
                                int counter = 0;
                                foreach (var r in responceDataOfEmployee)
                                {
                                    counter++;
                                    <tr>
                                        <td>@counter</td>
                                        <td>@r.CompanyCode</td>
                                        <td>@r.EmployeeId</td>
                                        <td>@r.Status</td>
                                        <td>@r.EmployeeName</td>
                                        <td>@r.fatherName</td>
                                        <td>@r.EmailId</td>
                                        <td>@r.MobileNumber</td>
                                        <td>@r.AadhaarNumber</td>
                                        <td>@r.PANNumber</td>
                                        <td>@r.UANNo</td>
                                        <td>@r.EmployeeEducation</td>
                                        <td>@r.Skills</td>
                                        <td>@r.Designation</td>
                                        <td>@r.DateOfBirth.ToString("dd/MMM/yyyy")</td>
                                        <td>@r.ReportingTo</td>
                                        <td>@r.DateOfJoin.ToString("dd/MMM/yyyy")</td>
                                        <td>@r.DateOfLeaving.ToString("dd/MMM/yyyy")</td>

                                    </tr>

                                }
                                totalItem = counter;
                            }

                        </tbody>
                    </table>
                </div>

                <div class="fixed-div" style="text-align:center;">
                    <i style="float:right">Total Items : @totalItem</i>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="OpenExportDialog">Export</button>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="CloseReport">Close</button>
                </div>
            </div>

        }
        @if (showReport && SelectedOption == "Asset")
        {
            <div style="background: whitesmoke;border-radius: 5px;">
                <div class="table-container table-responsive" style="overflow: auto; max-height:300px">
                    <table id="printAssetContent" class="table table-striped table-hover print-table">
                        <thead class="bg-secondary text-light fixed-div">
                            <tr style="text-align:center">
                                <td>SN.</td>
                                <td>Company</td>
                                <td>Asset Type</td>
                                <td>Brand</td>
                                <td>Model</td>
                                <td>SerialNumber</td>
                                <td>Status</td>
                                @* <td>EmployeeId</td> *@
                                <td>Emoloyee Name</td>
                                <td>Emoloyee Email</td>
                                <td>Aquire Date</td>
                                <td>Discard Date</td>
                  
                            </tr>
                        </thead>
                        <tbody>

                            @if (responceDataOfAsset?.Count == 0)
                            {
                                <tr><td colspan="3">No data found</td></tr>
                            }
                            else
                            {
                                int counter = 0;
                                foreach (var r in responceDataOfAsset)
                                {
                                    counter++;
                                    <tr>
                                        <td>@counter</td>
                                        <td>@r.CompanyCode</td>
                                        <td>@r.AssetType</td>
                                        <td>@r.Brand</td>
                                        <td>@r.Model</td>
                                        <td>@r.SerialNumber</td>
                                        <td>@r.Status</td>
                                        @* <td>@r.EmployeeId</td> *@
                                        <td>@r.EmployeeName</td>
                                        <td>@r.EmployeeEmail</td>
                                        <td>@r.AcquireDate.ToString("dd/MMM/yyyy")</td>
                                        <td>@r.DiscardDate?.ToString("dd/MMM/yyyy")</td>
                                        
                                    </tr>

                                }
                                totalItem = counter;
                            }

                        </tbody>
                    </table>
                </div>

                <div class="fixed-div" style="text-align:center;">
                    <i style="float:right">Total Items : @totalItem</i>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="OpenExportDialog">Export</button>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="CloseReport">Close</button>
                </div>
            </div>
        }
    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool show = false;
    string Message = string.Empty;
    string MessageBody = "Thank you!";
    bool IsError = false;
    bool IsSuccess = false;
    bool TaskCompleted = false;
    bool Exported = false;
    int totalItem = 0;
    Employee employeeModel = new();
    List<Company> company = new();
    private List<ClientBreadcrumbItem> breadcrumbItems = new();
    List<AssetType> assetType = new();
    List<Asset> asset = new();
    List<Employee> employee = new();
    AllocationlogReportGenerate model = new();
    List<Employee> responceDataOfEmployee = new();
    List<Asset> responceDataOfAsset = new();

    bool columnSelection = false;
    //private DateRange _issueDate = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private DateTime? joinDateStart;
    private DateTime? joinDateEnd;
    private DateTime? resignDateStart;
    private DateTime? resignDateEnd;
    public string selectedEmployeeStatus { get; set; }

    private DateTime? aquireDateStart;
    private DateTime? aquireDateEnd;
    private DateTime? discardDateStart;
    private DateTime? discardDateEnd;
    private string allocationStatus;
    DateTime dateTime;

    public string SelectedOption { get; set; }
    public string[] SkillOptions = { };
    ReportFilters reportFilters;
    AssetReportFilters assetReportFilters;

    protected override async Task OnInitializedAsync()
    {
        breadcrumbItems = new()
        {
            new ClientBreadcrumbItem { Text = "Home", Url = "/" },
            new ClientBreadcrumbItem { Text = "Reports", IsActive = true }
        };
        SelectedOption = "Employee";

        reportFilters = await client.GetEmployeeReportFileters();
        assetReportFilters = await client.GetAssetReportFileters();

        var employeeSkills = await client.GetAllSkill();
        SkillOptions = employeeSkills.Select(skill => skill.Skill).ToArray();


        company = new List<Company>(await client.GetAllCompany());
        //assetType = new List<AssetType>(await client.GetAllAssetType());
        employee = new List<Employee>(await client.GetAllEmployee());
        asset = new List<Asset>(await client.GetAllAsset());
    }

    //employee
    private string? selectedSourceCompanyCode { get; set; }
    private string? selectedJobProfile { get; set; }
    private string? selectedManager { get; set; }
    private string? selectedBranch { get; set; }
    private string? selectedLocation { get; set; }

    //asset
    private string? selectedSourceCompanyForAssetCode { get; set; }
    private string? selectedAssetType { get; set; }
    private string? selectedAssetBrand { get; set; }
    private string? selectedAssetModel { get; set; }

    private List<KeyValuePair<string, string>> CompanyDropdown =>
        company.Select(c => new KeyValuePair<string, string>(c.CompanyCode, $"{c.Name} ({c.CompanyCode})")).ToList();

    private List<KeyValuePair<string, string>> JobProfileDropdown =>
        reportFilters?.Designations?.Select(d => new KeyValuePair<string, string>(d, d)).ToList() ?? new();

    private List<KeyValuePair<string, string>> ManagerDropdown =>
        reportFilters?.Managers?.Select(m => new KeyValuePair<string, string>(m, m)).ToList() ?? new();

    private List<KeyValuePair<string, string>> BranchDropdown =>
        reportFilters?.Branches?.Select(b => new KeyValuePair<string, string>(b, b)).ToList() ?? new();

    private List<KeyValuePair<string, string>> AssetTypeDropdown =>
        string.IsNullOrEmpty(selectedSourceCompanyForAssetCode)
            ? new()
            : assetReportFilters.AssetType.Where(o => o.CompanyCode == selectedSourceCompanyForAssetCode)
                .Select(a => new KeyValuePair<string, string>(a.AssetTypeName, a.AssetTypeName)).ToList();

    private List<KeyValuePair<string, string>> AssetBrandDropdown =>
        string.IsNullOrEmpty(selectedAssetType)
            ? new()
            : assetReportFilters.Brand.Where(o => o.AssetType == selectedAssetType)
                .Select(b => new KeyValuePair<string, string>(b.BrandName, b.BrandName)).ToList();

    private List<KeyValuePair<string, string>> AssetModelDropdown =>
        string.IsNullOrEmpty(selectedAssetBrand)
            ? new()
            : assetReportFilters.Model.Where(o => o.Brand == selectedAssetBrand)
                .Select(m => new KeyValuePair<string, string>(m.ModelName, m.ModelName)).ToList();

    private async Task<IEnumerable<Company>> SourceCompanySearch(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return company;
        return company
        .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase) ||
        x.CompanyCode.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> JobProfileSearch(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return reportFilters.Designations;
        return reportFilters.Designations
        .Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> ManagerSearch(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return reportFilters.Managers;
        return reportFilters.Managers
        .Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> LocationSearch(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return reportFilters.Locations;
        return reportFilters.Locations
        .Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> BranchSearch(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return reportFilters.Branches;
        return reportFilters.Branches
        .Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    //Asset
    private async Task<IEnumerable<Company>> AssetSourceCompanySearch(string value)
    {
        await Task.Delay(5);
        selectedAssetType = null;
        selectedAssetBrand = null;
        selectedAssetModel = null;

        if (string.IsNullOrEmpty(value))
            return company;
        return company
        .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase) ||
        x.CompanyCode.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> AssetTypeSearch(string value)
    {
        await Task.Delay(5);
        selectedAssetBrand = null;
        selectedAssetModel = null;
        if (string.IsNullOrEmpty(selectedSourceCompanyForAssetCode))
        {
            return null;
        }
        if (string.IsNullOrEmpty(value))
            return assetReportFilters.AssetType.Where(o => o.CompanyCode == selectedSourceCompanyForAssetCode).Select(x => x.AssetTypeName);

        return assetReportFilters.AssetType.Where(o => o.CompanyCode == selectedSourceCompanyForAssetCode)
            .Where(x => x.AssetTypeName.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.AssetTypeName);
    }

    private async Task<IEnumerable<string>> AssetBrandSearch(string value)
    {
        await Task.Delay(5);
        selectedAssetModel = null;
        if (selectedAssetType == null)
        {
            return null;
        }
        if (string.IsNullOrEmpty(value))
            return assetReportFilters.Brand.Where(o => o.AssetType == selectedAssetType).Select(x => x.BrandName);

        return assetReportFilters.Brand.Where(o => o.AssetType == selectedAssetType)
            .Where(x => x.BrandName.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.BrandName);
    }

    private async Task<IEnumerable<string>> AssetModelSearch(string value)
    {
        await Task.Delay(5);
        if (selectedAssetBrand == null)
        {
            return null;
        }
        if (string.IsNullOrEmpty(value))
            return assetReportFilters.Model.Where(o => o.Brand == selectedAssetBrand).Select(x => x.ModelName);

        return assetReportFilters.Model.Where(o => o.Brand == selectedAssetBrand)
            .Where(x => x.ModelName.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.ModelName);
    }


    private bool multiselectionTextChoice;
    private List<string> selectedSkills { get; set; } = new();

    EmployeeFilterModel employeeFilterModel = new();
    AssetFilterModel assetFilterModel = new();





    public async Task ViewReportData()
    {
        totalItem = 0;
        showReport = true;
        if (SelectedOption == "Employee")
        {
            employeeFilterModel.Company = selectedSourceCompanyCode;
            employeeFilterModel.Designation = selectedJobProfile;
            employeeFilterModel.ManagerName = selectedManager;
            employeeFilterModel.BranchOffice = selectedBranch;
            employeeFilterModel.Location = selectedLocation;
            employeeFilterModel.Skills = selectedSkills;
            employeeFilterModel.EmployeeStatus = selectedEmployeeStatus;

            if (joinDateStart.HasValue && joinDateEnd.HasValue)
            {
                employeeFilterModel.JoinDateStart = joinDateStart.Value;
                employeeFilterModel.JoinDateEnd = joinDateEnd.Value.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
            }
            else
            {
                employeeFilterModel.JoinDateStart = new DateTime();
                employeeFilterModel.JoinDateEnd = new DateTime();
            }
            if (resignDateStart.HasValue && resignDateEnd.HasValue)
            {
                employeeFilterModel.ResignDateStart = resignDateStart.Value;
                employeeFilterModel.ResignDateEnd = resignDateEnd.Value.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
            }
            else
            {
                employeeFilterModel.ResignDateStart = new DateTime();
                employeeFilterModel.ResignDateEnd = new DateTime();
            }

            responceDataOfEmployee = await client.GetFilteredEmployeeReport(employeeFilterModel);
        }
        else
        {
            assetFilterModel.Status = null;
            assetFilterModel.Company = selectedSourceCompanyForAssetCode;
            assetFilterModel.AssetType = selectedAssetType;
            assetFilterModel.Brand = selectedAssetBrand;
            assetFilterModel.Model = selectedAssetModel;
            if (allocationStatus == "Free")
                assetFilterModel.Status = AllocationStatus.Free;
            if (allocationStatus == "Allocated")
                assetFilterModel.Status = AllocationStatus.Allocated;

            if (aquireDateStart.HasValue && aquireDateEnd.HasValue)
            {
                assetFilterModel.AquireDateStart = aquireDateStart.Value;
                assetFilterModel.AquireDateEnd = aquireDateEnd.Value.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
            }
            else
            {
                assetFilterModel.AquireDateStart = new DateTime();
                assetFilterModel.AquireDateEnd = new DateTime();
            }
            if (discardDateStart.HasValue && discardDateEnd.HasValue)
            {
                assetFilterModel.DiscardDateStart = discardDateStart.Value;
                assetFilterModel.DiscardDateEnd = discardDateEnd.Value.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
            }
            else
            {
                assetFilterModel.DiscardDateStart = new DateTime();
                assetFilterModel.DiscardDateEnd = new DateTime();
            }

            responceDataOfAsset = await client.GetFilteredAssetReport(assetFilterModel);
        }

    }

    bool showReport = false;
    public void CloseReport()
    {
        showReport = false;
    }
    public void ClearFilter()
    {
        showReport = false;
        selectedSourceCompanyCode = null;
        selectedJobProfile = null;
        selectedManager = null;
        selectedBranch = null;
        selectedLocation = null;
        selectedSkills = null;
        selectedEmployeeStatus = "All";
        joinDateStart = null;
        joinDateEnd = null;
        resignDateStart = null;
        resignDateEnd = null;

    }

    public void ClearAssetFilter()
    {
        showReport = false;
        selectedSourceCompanyForAssetCode = null;
        selectedAssetType = null;
        selectedAssetBrand = null;
        selectedAssetModel = null;
        selectedEmployeeStatus = null;
        aquireDateStart = null;
        aquireDateEnd = null;
        discardDateStart = null;
        discardDateEnd = null;
    }
    protected async Task ExportExcelReport()
    {
        if(SelectedOption == "Employee")
        {
            var responceData = await client.EmployeeExportToExcel(employeeFilterModel);
            var fileName = $"EmployeeReport {DateTime.Now.ToString()}.xlsx";
            var mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            await using (var memoryStream = new MemoryStream(responceData))
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, mimeType, memoryStream.ToArray());
            }
        }
        if (SelectedOption == "Asset")
        {
            var responceData = await client.AssetExportToExcel(assetFilterModel);
            var fileName = $"AssetReport {DateTime.Now.ToString()}.xlsx";
            var mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

            await using (var memoryStream = new MemoryStream(responceData))
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, mimeType, memoryStream.ToArray());
            }
        }
    }
   
    private async Task PrintPDF()
    {
        if(SelectedOption == "Employee")
            await JSRuntime.InvokeVoidAsync("printDiv", "printContent");
        // await JSRuntime.InvokeVoidAsync("printInterop.printDiv", "printContent");

        if (SelectedOption == "Asset")
            await JSRuntime.InvokeVoidAsync("printDiv", "printAssetContent");
    }

    private async Task OpenExportDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogResult = await DialogService.Show<DialogTemplateExample_Dialog>("Export to", options).Result;

        if (dialogResult != null)
        {
            if (dialogResult.Data != null)
            {
                if (dialogResult.Data.Equals("Excel"))
                {
                    await ExportExcelReport();
                }
                else if (dialogResult.Data.ToString() == "PDF")
                {
                    await PrintPDF();
                }
            }
        }
    }

    private void OnRadioChange()
    {
        showReport = false; 
    }
    private void OnStatusChange()
    {
        resignDateStart = null;
        resignDateEnd = null;
    }

    private Task OnSkillsChanged(IEnumerable<string> values)
    {
        selectedSkills = values.ToList();
        return Task.CompletedTask;
    }
}
