@* Corner fold right-to-left animation for dialog *@
<style>
    .dialog-container {
        width: 100%;
        height: 100vh;
        z-index: 9999;
        position: fixed;
        top: 0;
        left: 0;
        background: rgba(0,0,0,0.15);
        display: flex;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(6px);
        -webkit-backdrop-filter: blur(6px);
        background: linear-gradient(to left bottom, transparent 50%, rgba(0,0,0,.2) 0, rgba(0,0,0,.4)) 100% 0 no-repeat;
        transform-origin: bottom right;
        box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15)
    }

    .dialog {
        width: 320px;
        position: relative;
        animation: cornerFoldIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: visible;
    }

    @@keyframes cornerFoldIn {    
        0%{
            transform: perspective(600px) rotateY(-90deg) scale(0.8);
            opacity: 0;
        }

        60% {
            transform: perspective(600px) rotateY(10deg) scale(1.03);
            opacity: 1;
        }

        80% {
            transform: perspective(600px) rotateY(-2deg) scale(0.98);
        }

        100% {
            transform: perspective(600px) rotateY(0deg) scale(1);
            opacity: 1;
        }

    }

    .dialog::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        width: 48px;
        height: 48px;
        background: linear-gradient(135deg, #f8f9fa 60%, #e9ecef 100%);
        clip-path: polygon(100% 0, 0 0, 100% 100%);
        box-shadow: -4px 4px 8px #0001;
        z-index: 2;
        pointer-events: none;
    }
</style>

@if (Show)
{
    string cssClass;
    if (Title.Contains("Added") || Title.Contains("Submitted") || Title.Contains("Uploaded") || Title.Contains("Registered") || Title.Contains("Completed"))
    {
        cssClass = "bg-success";
    }
    else if (Title.Contains("Updated") || Title.Contains("Uploading"))
    {
        cssClass = "bg-warning";
    }
    else if (Title.Contains("Please wait") || Title.Contains("Shar") || Title.Contains("Process"))
    {
        cssClass = "bg-info";
    }
    else
    {
        cssClass = "bg-danger";
    }

    <div class="dialog-container">
        <div class="dialog">
            <div class="card borderd">
                <div class="card-header @cssClass" style="padding: 8px !important; display: flex; align-items: center;">
                    <h6 style="margin: 0;color:aliceblue;font-family:cursive;">@Title</h6>
                    <a @onclick="onClose" title="Close" style="cursor: pointer; margin-left: auto; color: darkred;">
                        <i class="fa fa-times-circle fa-lg" aria-hidden="true"></i>
                    </a>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="mt-2">
                            @ChildContent
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool Show { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public EventCallback<bool> OnCloseDialog { get; set; }

    private async Task onClose()
    {
        await OnCloseDialog.InvokeAsync(false);
    }
}